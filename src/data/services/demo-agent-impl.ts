import { SubscriptionsRepository } from '../../domain/repositories/subscriptions-repository'
import { IAAgent } from '../../domain/services/ai-agent'

export class DemoAgentImpl implements IAAgent {
  private readonly aiAgent: IAAgent
  private readonly subscriptionRepository: SubscriptionsRepository
  private readonly userStates: Map<string, {
    step: 'welcome' | 'waiting_for_expense' | 'waiting_for_report' | 'completed'
    lastResponse: string
  }> = new Map()

  constructor (aiAgent: IAAgent, subscriptionRepository: SubscriptionsRepository) {
    this.aiAgent = aiAgent
    this.subscriptionRepository = subscriptionRepository
  }

  async handleMessage (message: string, userId: string): Promise<string> {
    // Verificar se o usu√°rio j√° tem assinatura
    const hasSubscription = await this.subscriptionRepository.getSubscriptionStatus(userId)

    // Se o usu√°rio j√° tem assinatura, passar direto para o agente real
    if (hasSubscription) {
      return await this.aiAgent.handleMessage(message, userId)
    }

    // Verificar se o usu√°rio j√° completou o tutorial
    if (this.userStates.get(userId)?.step === 'completed') {
      // Se completou mas n√£o assinou, sempre retornar mensagem de assinatura
      return await this.getSubscriptionMessage(userId)
    }

    // Obter ou inicializar o estado do usu√°rio
    let userState = this.userStates.get(userId)
    if (userState == null) {
      userState = { step: 'welcome', lastResponse: '' }
      this.userStates.set(userId, userState)

      // Se √© a primeira intera√ß√£o, retornar mensagem de boas-vindas
      return this.getWelcomeMessage()
    }

    // Processar a mensagem com base no estado atual do usu√°rio
    switch (userState.step) {
      case 'welcome': {
        // Usu√°rio acabou de receber a mensagem de boas-vindas
        // Encaminhar mensagem para o agente real e atualizar estado
        const expenseResponse = await this.aiAgent.handleMessage(message, userId)

        // Verificar se o agente real salvou um gasto
        if (expenseResponse.includes('salvo')) {
          this.userStates.set(userId, { step: 'waiting_for_expense', lastResponse: expenseResponse })
          // Sugerir consultar os gastos
          return `${expenseResponse}\n\n‚ú® √ìtimo! Voc√™ registrou seu primeiro gasto!\n\nAgora experimente consultar seus gastos. Voc√™ pode digitar algo como:\n‚Ä¢ "Mostre meus gastos da semana"\n‚Ä¢ "Quanto gastei este m√™s?"`
        } else {
          // Se a resposta n√£o contiver "salvo", manter o mesmo estado
          return `${expenseResponse}\n\nTente adicionar um gasto dizendo algo como:\n‚Ä¢ "Gastei R$30 com almo√ßo hoje"\n‚Ä¢ "Paguei R$15 no transporte"`
        }
      }

      case 'waiting_for_expense': {
        // Usu√°rio j√° adicionou um gasto e estamos aguardando o pedido de relat√≥rio
        const reportResponse = await this.aiAgent.handleMessage(message, userId)

        // Verificar se o agente real retornou um relat√≥rio
        if (reportResponse.includes('RELAT√ìRIO')) {
          this.userStates.set(userId, { step: 'completed', lastResponse: reportResponse })

          // Mostrar o relat√≥rio e informar que precisa assinar para continuar
          return `${reportResponse}\n\nüîí **Demonstra√ß√£o conclu√≠da!**\n\nVoc√™ viu como √© f√°cil controlar suas finan√ßas com nosso assistente!\n\nPara continuar usando, √© necess√°rio assinar nosso plano:\n${await this.getSubscriptionLink(userId)}\n\nCom a assinatura, voc√™ ter√° acesso a:\n‚úÖ Registro ilimitado de gastos\n‚úÖ Relat√≥rios detalhados\n‚úÖ Categoriza√ß√£o autom√°tica\n‚úÖ Suporte priorit√°rio`
        } else {
          // Se a resposta n√£o contiver "RELAT√ìRIO", manter o mesmo estado
          return `${reportResponse}\n\nPara ver um resumo dos seus gastos, tente perguntar:\n‚Ä¢ "Mostre meus gastos da semana"\n‚Ä¢ "Relat√≥rio de despesas"`
        }
      }

      default:
        // Caso de fallback - n√£o deveria chegar aqui, mas por seguran√ßa
        return await this.getSubscriptionMessage(userId)
    }
  }

  private getWelcomeMessage (): string {
    return `üëã **Bem-vindo ao seu assistente financeiro pessoal!**

Estou aqui para ajudar voc√™ a controlar seus gastos de forma simples e pr√°tica.

Para come√ßar, que tal registrar seu primeiro gasto? √â f√°cil! Apenas me conte o que voc√™ gastou, como por exemplo:

‚Ä¢ "Gastei R$25 com almo√ßo hoje"
‚Ä¢ "Comprei um livro por R$45"
‚Ä¢ "Paguei R$120 na conta de luz ontem"

Vamos l√°, tente adicionar seu primeiro gasto agora!`
  }

  private async getSubscriptionMessage (userId: string): Promise<string> {
    const subscriptionLink = await this.getSubscriptionLink(userId)
    return `üîí **Acesso Limitado**

Voc√™ j√° experimentou as funcionalidades b√°sicas do nosso assistente financeiro. Para continuar utilizando e ter acesso a todos os recursos, √© necess√°rio assinar o plano premium.

${subscriptionLink}

Com a assinatura, voc√™ ter√°:
‚úÖ Registro ilimitado de gastos
‚úÖ Relat√≥rios detalhados por categoria
‚úÖ Previs√µes de gastos mensais

Assine agora e transforme sua gest√£o financeira!`
  }

  private async getSubscriptionLink (userId: string): Promise<string> {
    try {
      const paymentIntent = await this.subscriptionRepository.createSubscriptionLink(userId)
      return `[üëâ Clique aqui para assinar](${paymentIntent})`
    } catch (error) {
      console.error('Erro ao gerar link de pagamento:', error)
      return 'Entre em contato com o suporte para assinar o plano premium.'
    }
  }
}
